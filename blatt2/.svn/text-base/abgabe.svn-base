###############################################################################################
#
#	Tino Landmann, Sören Kröll, Christian Caspers, David Gens
#	Prof. Kaiser - BSRA - Gruppe A - Blatt 2
#
###############################################################################################



######### TODO: Makefile, diff vom moco-sim.c ##########



A2.1a) Die angegebene Zahlenfolge entspricht den binär codierten Prozessorinstruktionen
       für den Moco um zwei Zahlen von der Standardeingabe zu lesen, diese zu addieren
       und das Ergebnis auf der Standarausgabe auszugeben. Im Fall einer anderen Eingabe
       ist das Verhalten undefiniert. 

A2.1b) Auch im Fall der hier vorgegebenen Zahlenfolge werden zwei Zahlen gelesen und addiert.
       Als Erweiterung des ersten Programms steht am Schluss aber ein bedingter Sprung (falls
       das Ergebnis nicht 10 war) zurück zum Anfang, sonst hält das Programm an. Diese Schleife
       wird durch die Befehle SUBN, JMPNZ und eine Sprungmarke namens "loop" realisiert. Die im
       Assemblercode enthaltene Sprungmarke "end" wird nicht verwendet.
       
A2.1c) Funktion implementieren, NUM_INSTRUCTIONS ggf. erhöhen und die Funktion (mit Anzahl der 
       Argumente) in das InstructionSet eintragen.

A2.2a) Für die Beispielprogramme aus A2.1 liefert der Moco-Assembler Dateien mit identischem 
       Inhalt, wie die zuvor genutzten Hilfsprogramme (siehe Quellcode), z.B:

       dgens001@pc15-118 ~/Desktop/sem4/bsra/ueb2 $ gcc a2.1a.c -o a2.1a
       dgens001@pc15-118 ~/Desktop/sem4/bsra/ueb2 $ ./a2.1a prog
       dgens001@pc15-118 ~/Desktop/sem4/bsra/ueb2 $ hd prog
       00000000  01 00 00 00 00 00 00 00  01 00 00 00 01 00 00 00  |................|
       00000010  00 00 00 00 02 00 00 00  04 00 00 00 01 00 00 00  |................|
       00000020  02 00 00 00 03 00 00 00  02 00 00 00 03 00 00 00  |................|
       00000030  00 00 00 00 00 00 00 00                           |........|
       00000038
       dgens001@pc15-118 ~/Desktop/sem4/bsra/ueb2 $ moco-v0.1/ass/moco-ass a2.1a.asm a2.1a.moco
       dgens001@pc15-118 ~/Desktop/sem4/bsra/ueb2 $ hd a2.1a.moco
       00000000  01 00 00 00 00 00 00 00  01 00 00 00 01 00 00 00  |................|
       00000010  00 00 00 00 02 00 00 00  04 00 00 00 01 00 00 00  |................|
       00000020  02 00 00 00 03 00 00 00  02 00 00 00 03 00 00 00  |................|
       00000030  00 00 00 00 00 00 00 00                           |........|
       00000038

A2.2b) Im ersten Durchlauf wird analaysiert, auf welchen Adressen die Marker des
       Programms liegen. Im zweiten Durchlauf werden Marker und Mnemonics durch
       OpCodes und Adressen ersetzt.
       
A2.2c) Wird der Code wie angegeben verändert, wird das Programm größer. 
       
       "DC -1" speichert die -1 als FF FF FF FF im Programmcode
       "DB 'Hello World\n'" speichert den String
       "DS 100" erzeugt 400byte (100 mal 32bit) leeren Speicher
       Durch "stk:" wird ein Marker für den Stack angelegt
       
       00000000  01 00 00 00 00 00 00 00  01 00 00 00 01 00 00 00  |................|
       00000010  00 00 00 00 02 00 00 00  04 00 00 00 01 00 00 00  |................|
       00000020  02 00 00 00 03 00 00 00  02 00 00 00 03 00 00 00  |................|
       00000030  00 00 00 00 00 00 00 00  ff ff ff ff 48 65 6c 6c  |............Hell|
       00000040  6f 20 57 6f 72 6c 64 0a  00 00 00 00 00 00 00 00  |o World.........|
       00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
       *
       000001dc

A2.3a) ########## ASSEMBLER-QUELLCODE ###########
        siehe: static void I_load(int ra, int rt)

	Lädt den Inhalt der Speicherzelle, auf die ra zeigt in das Register rt.
	Geladen wird wortweise, Zugriffe zwischen zwei Worten führen zu einer
	Ausnahme.

        siehe: static void I_loadb(int ra, int ro, int rt)

	Lädt den Inhalt der Speicherzelle, auf die ra+ro zeigt in das Register rt.
	Geladen wird byteweise, Zugriffe zwischen zwei Worten sind also möglich.

	siehe static void I_stor(int rs, int ra)

	Speichert den Wert von rt in die Addresse ra im Freispeicher. Ungültige 
	Addresszugriffe werden abgewiesen, bei zu wenig Speicher gibt es eine 
	Ausnahme.

	siehe static void I_storb(int rs, int ra, int ro)

	Speichert den Wert von rs in die Addresse ra+ro im Freispeicher. Dies
	geschieht byteweise, die oberen Bytes von rs werden ignoriert. Auch
	hier gibt es im Fehlerfall eine Ausnahme.


A2.3b)  siehe: static void I_push(int rs) in moco-sim.c
     
        Pre-Increment
        Zuerst wird das übergebene Register auf Gültigkeit geprüft. Danach, ob der 
        Stack Pointer inkrementiert werden kann.
        Wird keine Exception ausgelöst wird der Stack Pointer inkrementiert und
        der Inhalt des Registers in den Speicherbereich geschrieben auf den der
        Stack Pointer zeigt.
        
        siehe: static void I_pop(int rt) in moco-sim.c
       
        Post-Decrement
        Wie bei Push wird zunächst das Register überprüft. Anschließend wird
        geprüft, ob der Stack Pointer auf eine gültige Adresse zeigt.
        Dann wird zuerst der Inhalt auf den der Stack Pointer zeigt ins
        Register kopiert und das Flag-Register aktualisiert.
        Danach wird der Stack Pointer dekrementiert.
        

A2.3c)  siehe: static void I_jsr(int a) in moco-sim.c

        JSR funktioniert wie der POP-Befehl. Statt des Inhalts eines Registers
        wird allerdings der aktuelle Werte des Programmzähler-Registers auf dem
        Stack abgelegt und dadurch die aktuelle Adresse der Anweisung gesichert.
        
        Danach wird der übergebene Wert "a" in das Programmzähler-Register geladen
        wodurch der Sprung ausgeführt wird.
               
        siehe: static void I_ret(void) in moco-sim.c

        RET funktioniert wie POP nur dass der Wert des Stacks im Programmzähler-Register
        abgelegt wird.

A2.3d) Der Quellcode arbeitet Korrekt für Fakultäten bis einschließlich 12!
       13! Ist größer als der größte, positive Integerwert. Deshalb kommt es zu Überläufen.
       
       Bei Fakultäten größer 50! wird der Programmcode überschrieben da der Stack
       mit 100 Wörtern (DS 100) angelegt wurde, und bei jedem JSR die Rücksprungadresse und 
       Zwischenwert auf den Stack gelegt werden.
       Der Moco-Sim interpretiert nun die durch den Stack überschriebenen Bytes als OpCodes
       und Register, das Verhalten der Anwendung ist ab diesem Zeitpunkt nicht vorher
       zu sagen.